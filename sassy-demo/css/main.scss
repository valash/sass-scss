// why vars are awesome because if you have a color theme throughout a site a variable is better than repeatedly putting in the hex color

//functions let you instead of having map-get($colors, primary) every time you can set the function to call $colors every time without having to specify it again and again.

@import url('https://fonts.googleapis.com/css?family=Montserrat');

//all variables

$colors: (
	primary: #ffcfcf,
	primary-light: lighten(#ffcfcf, 40%),
	primary-dark: darken(#ffcfcf, 10%),
	accent: #ffffcf
);
$padding: 15px;
$borders: 15px;
$desktop: 750px;
$middle: center;
$upper: uppercase;
$clip: polygon(100% 0, 100% 38%, 23% 100%, 0 100%, 0 0);
$fontcolo: #cfb1b1;

//mixin
@mixin desktop {
	@media (min-width: #{$desktop}) {
		@content;
	}
}

//functions - map get
@function color($colors-name) {
	@return map-get($colors, $colors-name);
}

body,
html {
	height: 100%;
}

body {
	font-family: 'Montserrat';
	margin: 0;

	#bg {
		clip-path: $clip;
		background-color: color(primary);
		width: 100%;
		height: 100%;
		position: absolute;
		z-index: -1;

		@include desktop {
			clip-path: $clip;
		}
	}
	header a {
		color: white;
		text-decoration: none;
		padding: $padding;
		display: block;
		text-transform: $upper;
	}
}

main {
	@include desktop {
		display: grid;
		grid-template-columns: 50% auto;
		grid-template-areas: 'primary card';
	}

	section#card {
		background: white;
		color: $fontcolo;
		padding: 20px;
		margin: 1em auto;
		border-radius: $borders;
		box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
		width: 80%;
		margin: auto;
		height: 30%;
		background-color: color, primary;
		animation-name: fade-in;
		animation-fill-mode: both;
		animation-duration: 1.5s;

		$animationDelay: 1;
		@for $i from 1 through 15 {
			.card div:nth-of-type(#{$i}) {
				animation-delay: #{0.3+ ($i)/30}s;
			}
		}

		@keyframes fade-in {
			0% {
				opacity: 0;
			}
			100% {
				opacity: 1;
			}
		}
		@include desktop {
			grid-area: card;
			height: fit-content;
			align-self: $middle;
			margin: 1em;
		}

		ul {
			list-style-type: none;
			margin: 0;
			padding: 0;

			li {
				margin-bottom: 10px;

				span {
					position: absolute;
					width: 30px;
					height: 30px;
					background-color: color(primary-light);
					border-radius: 50%;
					margin-right: 10px;
				}
				strong {
					display: inline-block;
					margin-left: max(40px);
					margin-top: 10px;
				}
			}
		}
	}
	section#primary {
		color: white;
		padding: $padding;
		text-align: $middle;

		@include desktop {
			grid-area: primary;
			text-align: left;
			margin: 4em 0 0 4em;
		}

		h1 {
			font-size: 3em;
			margin-top: 10px;
			text-transform: uppercase;
			@include desktop {
				width: 30%;
				font-size: 4em;
				line-height: 0.9em;
			}
		}

		p {
			font-size: 1.4em;
		}
		a {
			color: color(primary-dark);
			border-radius: $borders;
			text-decoration: none;
			text-transform: $upper;
			font-weight: bold;
			background-color: color(accent);
			display: block;
			text-align: $middle;
			margin: 50px auto 0 auto;
			padding: $padding;

			@include desktop {
				display: inline-block;
				padding: $padding $padding * 4;
				//you can do math in sass
			}
		}
	}
}
